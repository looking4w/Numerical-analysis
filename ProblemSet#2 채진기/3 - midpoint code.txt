from sympy import *

# 이번 문제의 대상이 되는 함수 f(x) 입니다.
def f(x):
    y = 3*x*exp(x) - cos(x)
    return y

# 소수점 4째자리 수준의 정확도로 three-point midpoint formular를 계산해주는 함수를 정의합니다.
def three(x0, h):
    res = (1 / (2 * h)) * ( round(f(x0 + h), 4) - round(f(x0 - h), 4) )
    return res

# 소수점 4째자리 수준의 정확도로 five-point midpoint formular를 계산해주는 함수를 정의합니다.
def five(x0, h):
    res = (1 / (2 * h)) * ( round(f(x0 - 2 * h), 4) - 8 * round(f(x0 - h), 4) + 8 * round(f(x0 + h), 4) - round(f(x0 + 2 * h), 4) )
    return res

# 소수점 4째자리 수준의 정확도로 second derivative Midpoint formular를 계산해주는 함수를 정의합니다.
def second(x0, h):
    res = (1 / (h ** 2)) * ( round(f(x0 - h), 4) - 2 * round(f(x0), 4) + round(f(x0 + h), 4) )
    return res

# 위에서 정의한 함수들을 간편하게 이용하기위해 x0와 h를 설정해주고, 소수점 4째자리 수준의 정확도를 위해 round함수를 이용합니다.
if __name__ == '__main__':
    x0 = 1.3
    h = 0.5
    dfthree = three(x0, h)
    print(f'{h}만큼 균등하게 떨어진 세 점으로부터 계산한 일차도함수에 {x0}을 대입한 값은 {round(dfthree, 4)} 입니다.\n')
    dffive = five(x0, h)
    print(f'{h}만큼 균등하게 떨어진 다섯개의 점으로부터 계산한 일차도함수에 {x0}을 대입한 값은 {round(dffive, 4)} 입니다.\n')
    dfsecond = second(x0, h)
    print(f'{h}만큼 균등하게 떨어진 세 점으로부터 계산한 이계도함수에 {x0}을 대입한 값은 {round(dfsecond, 4)} 입니다.\n')